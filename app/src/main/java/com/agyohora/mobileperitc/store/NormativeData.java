package com.agyohora.mobileperitc.store;

import android.util.Log;

import com.agyohora.mobileperitc.utils.CommonUtils;

import java.util.Arrays;

import static java.lang.Math.abs;

/**
 * Created by namputo on 21/03/18.
 */

public class NormativeData {

    //24_2 FULL THRESHOLD
    private static double[] normalList_24_2_FT = new double[]{
            29.43625, 28.62564, 28.63979, 27.48141, 25.99512, 28.08144, 28.90627, 28.69953, 27.27426, 28.24047, 27.80467, 27.19896, 26.72237, 26.55775, 27.43604, 27.41643, 25.3345, 28.40896, 26.61671, 27.03232, 27.5982, 27.71402, 25.90697, 26.76919, 27.00648, 25.20405, 26.25314, 29.07687, 28.61585, 1, 28.09243, 28.29539, 28.86979, 28.27842, 27.63226, 28.53448, 28.39092, 28.19128, 26.86257, 26.89308, 29.2464, 28.83324, 29, 27.91748, 26.01178, 28.59764, 29.0323, 28.94377, 26.96003, 28.70249, 28.44595, 27.54789, 26.83685, 26.66957
    };

    private static double[] slopeList_24_2_FT = new double[]{
            -0.067651267, -0.071954578, -0.071088054, -0.063316989, -0.085233127, -0.046515441, -0.082721703, -0.075118192, -0.077895653, -0.055097455, -0.057020176, -0.077352518, -0.065277487, -0.072568237, -0.062661694, -0.087053274, -0.121318568, -0.084968574, -0.083048087, -0.088059841, -0.106546742, -0.088721566, -0.079070832, -0.081201612, -0.091498587, -0.058301368, -0.094652377, -0.074374947, -0.076955164, 0, -0.100840697, -0.055657867, -0.086979357, -0.092808071, -0.091935602, -0.06895157, -0.065152579, -0.076511949, -0.080570084, -0.06551255, -0.061600785, -0.069436549, -0.055631338, -0.074676336, -0.063972607, -0.065091765, -0.064596845, -0.056229665, -0.079039805, -0.070249434, -0.068106626, -0.0719905, -0.08157483, -0.082608141};

    private static double[] stdev_24_2_FT = new double[]{
            2.258883337, 1.946622674, 2.296995774, 2.525652295, 3.31754736, 1.993711209, 2.111934917, 2.570564521, 2.970437535, 2.614209931, 2.523763824, 2.727471567, 2.718827311, 3.037961165, 3.040983072, 2.460212724, 5.862669557, 2.49802263, 2.92257074, 2.683901336, 2.523731265, 2.736787934, 3.015010073, 2.753444833, 2.918437826, 2.997853396, 2.930065875, 2.786202089, 2.371605609, 0, 2.820455935, 2.291939343, 2.620227425, 2.768568694, 2.622234539, 2.598808263, 2.687199877, 2.704766307, 2.713701802, 2.576775294, 1.94419766, 2.024532044, 2.053068843, 2.330487176, 2.932680961, 2.066804737, 2.154889089, 2.418332657, 2.565525256, 2.518560012, 2.59310642, 2.934940497, 2.620238113, 3.011228718,
    };

    private static double[] md5_24_2_FT = new double[]{
            -4.800, -2.468, -4.456, -4.449, -5.511, -3.949, -3.926, -4.507, -5.974, -4.965, -4.499, -4.845, -4.357, -5.787, -5.431, -4.327, -13.161, -5.062, -5.259, -5.336, -3.768, -4.920, -5.221, -5.515, -4.830, -4.927, -5.034, -2.599, -4.000, 0.000, -5.238, -4.549, -5.517, -4.797, -4.536, -5.689, -5.391, -5.421, -4.099, -4.476, -3.625, -3.809, -3.778, -4.136, -5.214, -3.964, -3.940, -4.690, -4.662, -4.767, -4.564, -5.645, -4.200, -5.379,
    };

    private static double[] md2_24_2_FT = new double[]{
            -5.918, -4.835, -5.301, -5.574, -7.700, -4.802, -5.178, -6.917, -7.410, -6.024, -5.239, -6.175, -6.579, -7.176, -6.791, -4.845, -23.236, -5.732, -6.750, -6.283, -5.116, -5.462, -6.947, -6.240, -5.749, -7.186, -6.260, -4.058, -5.352, 0.000, -6.113, -6.344, -6.377, -6.662, -5.319, -6.236, -6.542, -6.301, -5.280, -4.978, -4.635, -5.063, -4.141, -4.976, -6.892, -5.082, -4.606, -5.870, -6.071, -5.773, -6.629, -7.156, -5.463, -7.611,
    };

    private static double[] md1_24_2_FT = new double[]{
            -6.595, -5.596, -5.876, -6.030, -8.977, -5.582, -6.207, -7.553, -8.124, -7.180, -6.649, -6.477, -7.377, -7.833, -8.219, -5.178, -24.722, -6.040, -8.702, -7.046, -6.120, -6.448, -7.877, -6.529, -6.125, -8.251, -7.250, -4.526, -5.670, 0.000, -8.209, -7.109, -6.916, -7.233, -6.495, -6.870, -7.071, -6.859, -6.709, -5.154, -4.902, -6.143, -4.822, -5.187, -8.521, -5.856, -5.140, -7.676, -6.913, -6.894, -7.051, -7.639, -6.068, -8.353,
    };

    private static double[] md05_24_2_FT = new double[]{
            -7.312, -6.432, -6.303, -6.203, -10.415, -6.299, -7.026, -7.915, -8.586, -8.324, -7.525, -7.018, -8.415, -8.091, -9.712, -5.934, -26.459, -6.389, -8.766, -7.236, -6.644, -7.292, -9.125, -6.830, -7.186, -8.504, -8.225, -8.295, -7.113, 0.000, -8.830, -7.393, -7.354, -7.811, -8.390, -7.435, -7.828, -7.309, -7.526, -5.311, -5.670, -6.165, -5.861, -5.511, -9.684, -6.386, -5.262, -7.775, -9.012, -7.080, -7.667, -8.275, -6.596, -8.907,
    };

    private static double[] pd5_24_2_FT = new double[]{
            -5.196, -4.480, -5.302, -5.422, -6.076, -5.059, -4.318, -5.266, -5.992, -5.789, -5.551, -5.655, -5.287, -6.477, -6.007, -5.429, -15.287, -5.816, -6.674, -6.035, -4.727, -5.637, -6.417, -5.285, -6.137, -5.894, -6.525, -4.232, -5.372, -4.169, -6.523, -5.786, -5.824, -5.675, -5.637, -5.592, -5.794, -5.659, -4.849, -5.313, -4.774, -4.509, -4.410, -4.453, -5.956, -4.909, -4.649, -4.978, -5.106, -5.238, -5.663, -5.796, -5.766, -5.694
    };

    private static double[] pd2_24_2_FT = new double[]{
            -6.239, -5.836, -5.966, -6.033, -7.593, -5.493, -6.198, -6.666, -8.083, -6.951, -6.043, -6.633, -7.289, -7.503, -7.845, -5.963, -25.023, -7.261, -7.853, -7.501, -5.290, -6.819, -8.023, -6.517, -6.846, -7.029, -7.505, -5.035, -5.962, -4.925, -7.254, -6.204, -6.564, -6.519, -6.764, -6.120, -6.377, -6.415, -5.891, -5.963, -5.650, -6.440, -5.346, -5.378, -6.858, -5.875, -5.590, -5.932, -6.169, -6.564, -6.764, -7.090, -6.589, -8.083
    };

    private static double[] pd1_24_2_FT = new double[]{
            -6.701, -6.466, -6.266, -6.470, -9.977, -6.015, -6.761, -7.785, -9.166, -7.767, -6.751, -7.554, -8.271, -9.480, -8.590, -6.468, -26.070, -7.752, -8.639, -8.353, -5.748, -7.554, -9.135, -6.692, -7.187, -7.380, -8.124, -5.772, -6.314, -5.294, -7.980, -7.176, -6.888, -7.356, -7.366, -6.383, -8.198, -6.841, -6.408, -6.849, -6.187, -6.747, -5.999, -5.712, -7.584, -6.470, -5.762, -6.834, -8.444, -7.186, -7.726, -7.233, -6.882, -10.296
    };

    private static double[] pd05_24_2_FT = new double[]{
            -7.527, -7.689, -6.941, -6.884, -13.656, -6.682, -7.716, -7.952, -9.621, -9.305, -7.922, -9.730, -8.542, -10.497, -10.798, -6.570, -26.946, -7.951, -9.321, -8.544, -6.380, -8.330, -10.165, -6.982, -8.084, -8.389, -8.646, -9.557, -7.055, -5.647, -8.974, -7.317, -7.039, -7.577, -8.527, -6.509, -8.287, -7.585, -7.328, -7.018, -6.502, -7.164, -7.053, -6.093, -9.399, -8.101, -6.007, -7.129, -11.506, -8.316, -8.134, -7.925, -7.094, -11.391
    };


    //24_2 ELISAR ZEST

    //IN THIS DATASET. LIMITS FOR ZEST ARE SAME AS FOR FULL THRESHOLD


    private static double[] normalList_24_2_ELISARZEST = normalList_24_2_FT;


    private static double[] slopeList_24_2_ELISARZEST = slopeList_24_2_FT;

    private static double[] stdev_24_2_ELISARZEST = stdev_24_2_FT;

    private static double[] md5_24_2_ELISARZEST = md5_24_2_FT;

    private static double[] md2_24_2_ELISARZEST = md2_24_2_FT;

    private static double[] md1_24_2_ELISARZEST = md1_24_2_FT;

    private static double[] md05_24_2_ELISARZEST = md05_24_2_FT;

    private static double[] pd5_24_2_ELISARZEST = pd5_24_2_FT;

    private static double[] pd2_24_2_ELISARZEST = pd2_24_2_FT;

    private static double[] pd1_24_2_ELISARZEST = pd1_24_2_FT;

    private static double[] pd05_24_2_ELISARZEST = pd05_24_2_FT;


    //30_2 FULL THRESHOLD
    private static double[] normalList_30_2_FT = new double[]{
            29.436, 28.626, 28.640, 27.481, 25.995, 28.081, 28.906, 28.700, 27.274, 25.470, 28.240, 27.805, 27.199, 26.575, 26.722, 26.558, 25.294, 24.609, 24.833, 27.436, 27.416, 25.335, 28.409, 29.281, 26.617, 27.032, 27.598, 27.714, 27.769, 25.907, 26.769, 27.006, 26.568, 25.204, 26.253, 25.563, 23.758, 24.415, 29.077, 28.616, 1.000, 28.092, 27.578, 28.295, 28.870, 28.278, 27.632, 26.837, 28.534, 28.391, 28.191, 27.169, 26.863, 26.893, 26.671, 25.650, 25.620, 29.246, 28.833, 29.000, 27.917, 26.012, 28.598, 29.032, 28.944, 26.960, 25.115, 28.702, 28.446, 27.548, 26.125, 26.837, 26.670, 25.583, 25.465, 24.638,
    };

    private static double[] slopeList_30_2_FT = new double[]{
            -0.068, -0.072, -0.071, -0.063, -0.085, -0.047, -0.083, -0.075, -0.078, -0.078, -0.055, -0.057, -0.077, -0.089, -0.065, -0.073, -0.061, -0.068, -0.074, -0.063, -0.087, -0.121, -0.085, -0.092, -0.083, -0.088, -0.107, -0.089, -0.103, -0.079, -0.081, -0.091, -0.096, -0.058, -0.095, -0.087, -0.047, -0.098, -0.074, -0.077, 0.000, -0.101, -0.078, -0.056, -0.087, -0.093, -0.092, -0.088, -0.069, -0.065, -0.077, -0.103, -0.081, -0.066, -0.082, -0.066, -0.076, -0.062, -0.069, -0.056, -0.075, -0.064, -0.065, -0.065, -0.056, -0.079, -0.083, -0.070, -0.068, -0.072, -0.080, -0.082, -0.083, -0.069, -0.086, -0.072,
    };

    private static double[] stdev_30_2_FT = new double[]{
            2.259, 1.947, 2.297, 2.526, 3.318, 1.994, 2.112, 2.571, 2.970, 3.123, 2.614, 2.524, 2.727, 3.002, 2.719, 3.038, 3.183, 3.155, 3.011, 3.041, 2.460, 5.863, 2.498, 3.080, 2.923, 2.684, 2.524, 2.737, 3.222, 3.015, 2.753, 2.918, 2.816, 2.998, 2.930, 2.959, 3.076, 3.230, 2.786, 2.372, 0.000, 2.820, 3.159, 2.292, 2.620, 2.769, 2.622, 3.335, 2.599, 2.687, 2.705, 2.516, 2.714, 2.577, 2.993, 3.457, 3.440, 1.944, 2.025, 2.053, 2.330, 2.933, 2.067, 2.155, 2.418, 2.566, 2.826, 2.519, 2.593, 2.935, 3.015, 2.620, 3.011, 2.990, 2.823, 3.220,
    };

    private static double[] md5_30_2_FT = new double[]{
            -4.800, -2.468, -4.456, -4.449, -5.511, -3.949, -3.926, -4.507, -5.974, -5.239, -4.965, -4.499, -4.845, -5.378, -4.357, -5.787, -5.011, -5.370, -6.042, -5.431, -4.327, -13.161, -5.062, -6.145, -5.259, -5.336, -3.768, -4.920, -5.840, -5.221, -5.515, -4.830, -4.626, -4.927, -5.034, -5.114, -4.872, -6.212, -2.599, -4.000, 0.000, -5.238, -6.319, -4.549, -5.517, -4.797, -4.536, -6.393, -5.689, -5.391, -5.421, -4.095, -4.099, -4.476, -4.593, -5.286, -5.072, -3.625, -3.809, -3.778, -4.136, -5.214, -3.964, -3.940, -4.690, -4.662, -4.771, -4.767, -4.564, -5.645, -5.445, -4.200, -5.379, -4.905, -5.288, -5.161,
    };

    private static double[] md2_30_2_FT = new double[]{
            -5.918, -4.835, -5.301, -5.574, -7.700, -4.802, -5.178, -6.917, -7.410, -6.000, -6.024, -5.239, -6.175, -6.360, -6.579, -7.176, -5.855, -6.849, -7.007, -6.791, -4.845, -23.236, -5.732, -9.603, -6.750, -6.283, -5.116, -5.462, -9.162, -6.947, -6.240, -5.749, -5.959, -7.186, -6.260, -5.924, -5.778, -7.023, -4.058, -5.352, 0.000, -6.113, -9.099, -6.344, -6.377, -6.662, -5.319, -8.140, -6.236, -6.542, -6.301, -5.247, -5.280, -4.978, -6.353, -6.745, -6.835, -4.635, -5.063, -4.141, -4.976, -6.892, -5.082, -4.606, -5.870, -6.071, -5.522, -5.773, -6.629, -7.156, -6.942, -5.463, -7.611, -6.280, -6.144, -6.997,
    };

    private static double[] md1_30_2_FT = new double[]{
            -6.595, -5.596, -5.876, -6.030, -8.977, -5.582, -6.207, -7.553, -8.124, -6.033, -7.180, -6.649, -6.477, -6.495, -7.377, -7.833, -5.922, -7.030, -8.037, -8.219, -5.178, -24.722, -6.040, -11.823, -8.702, -7.046, -6.120, -6.448, -14.502, -7.877, -6.529, -6.125, -7.057, -8.251, -7.250, -6.682, -6.617, -7.776, -4.526, -5.670, 0.000, -8.209, -9.974, -7.109, -6.916, -7.233, -6.495, -10.073, -6.870, -7.071, -6.859, -5.718, -6.709, -5.154, -7.302, -7.704, -7.505, -4.902, -6.143, -4.822, -5.187, -8.521, -5.856, -5.140, -7.676, -6.913, -6.721, -6.894, -7.051, -7.639, -7.381, -6.068, -8.353, -7.888, -6.865, -7.920,
    };

    private static double[] md05_30_2_FT = new double[]{
            -7.312, -6.432, -6.303, -6.203, -10.415, -6.299, -7.026, -7.915, -8.586, -6.078, -8.324, -7.525, -7.018, -6.825, -8.415, -8.091, -6.534, -7.120, -8.436, -9.712, -5.934, -26.459, -6.389, -13.284, -8.766, -7.236, -6.644, -7.292, -15.046, -9.125, -6.830, -7.186, -7.523, -8.504, -8.225, -7.542, -8.013, -9.263, -8.295, -7.113, 0.000, -8.830, -10.185, -7.393, -7.354, -7.811, -8.390, -11.208, -7.435, -7.828, -7.309, -6.167, -7.526, -5.311, -9.490, -10.972, -11.297, -5.670, -6.165, -5.861, -5.511, -9.684, -6.386, -5.262, -7.775, -9.012, -7.386, -7.080, -7.667, -8.275, -7.674, -6.596, -8.907, -9.301, -8.069, -8.381,
    };

    private static double[] pd5_30_2_FT = new double[]{
            -5.196, -4.480, -5.302, -5.422, -6.076, -5.059, -4.318, -5.266, -5.992, -5.753, -5.789, -5.551, -5.655, -5.912, -5.287, -6.477, -6.366, -5.975, -6.792, -6.007, -5.429, -15.287, -5.816, -6.672, -6.674, -6.035, -4.727, -5.637, -6.296, -6.417, -5.285, -6.137, -5.436, -5.894, -6.525, -5.649, -5.452, -6.831, -4.232, -5.372, -4.169, -6.523, -7.003, -5.786, -5.824, -5.675, -5.637, -7.710, -5.592, -5.794, -5.659, -5.140, -4.849, -5.313, -5.595, -5.869, -6.263, -4.774, -4.509, -4.410, -4.453, -5.956, -4.909, -4.649, -4.978, -5.106, -5.578, -5.238, -5.663, -5.796, -6.021, -5.766, -5.694, -6.032, -5.501, -5.792,
    };

    private static double[] pd2_30_2_FT = new double[]{
            -6.239, -5.836, -5.966, -6.033, -7.593, -5.493, -6.198, -6.666, -8.083, -6.983, -6.951, -6.043, -6.633, -7.176, -7.289, -7.503, -7.324, -7.074, -7.483, -7.845, -5.963, -25.023, -7.261, -11.037, -7.853, -7.501, -5.290, -6.819, -11.000, -8.023, -6.517, -6.846, -6.590, -7.029, -7.505, -6.507, -7.215, -8.144, -5.035, -5.962, -4.925, -7.254, -9.476, -6.204, -6.564, -6.519, -6.764, -9.403, -6.120, -6.377, -6.415, -5.911, -5.891, -5.963, -7.311, -7.959, -7.764, -5.650, -6.440, -5.346, -5.378, -6.858, -5.875, -5.590, -5.932, -6.169, -6.265, -6.564, -6.764, -7.090, -7.361, -6.589, -8.083, -8.452, -8.362, -8.398,
    };

    private static double[] pd1_30_2_FT = new double[]{
            -6.701, -6.466, -6.266, -6.470, -9.977, -6.015, -6.761, -7.785, -9.166, -7.755, -7.767, -6.751, -7.554, -7.855, -8.271, -9.480, -7.994, -8.119, -7.922, -8.590, -6.468, -26.070, -7.752, -12.284, -8.639, -8.353, -5.748, -7.554, -14.039, -9.135, -6.692, -7.187, -7.409, -7.380, -8.124, -6.806, -7.589, -8.371, -5.772, -6.314, -5.294, -7.980, -10.447, -7.176, -6.888, -7.356, -7.366, -11.098, -6.383, -8.198, -6.841, -6.961, -6.408, -6.849, -9.451, -8.917, -9.244, -6.187, -6.747, -5.999, -5.712, -7.584, -6.470, -5.762, -6.834, -8.444, -7.360, -7.186, -7.726, -7.233, -8.167, -6.882, -10.296, -10.574, -9.108, -9.705,
    };

    private static double[] pd05_30_2_FT = new double[]{
            -7.527, -7.689, -6.941, -6.884, -13.656, -6.682, -7.716, -7.952, -9.621, -8.095, -9.305, -7.922, -9.730, -8.262, -8.542, -10.497, -9.671, -8.511, -8.085, -10.798, -6.570, -26.946, -7.951, -13.756, -9.321, -8.544, -6.380, -8.330, -14.814, -10.165, -6.982, -8.084, -7.714, -8.389, -8.646, -6.910, -7.828, -8.640, -9.557, -7.055, -5.647, -8.974, -11.313, -7.317, -7.039, -7.577, -8.527, -13.253, -6.509, -8.287, -7.585, -7.962, -7.328, -7.018, -11.259, -11.721, -12.557, -6.502, -7.164, -7.053, -6.093, -9.399, -8.101, -6.007, -7.129, -11.506, -7.863, -8.316, -8.134, -7.925, -8.470, -7.094, -11.391, -11.866, -9.768, -10.672,
    };

    //ELISARFAST
    private static double[] normalList_24_2_ELISARFAST = new double[]{30.789, 30.065, 30.062, 28.748, 27.700, 29.012, 30.561, 30.202, 28.832, 29.342, 28.945, 28.746, 28.028, 28.009, 28.689, 29.157, 27.761, 30.108, 28.278, 28.794, 29.729, 29.488, 27.488, 28.393, 28.836, 26.370, 28.146, 30.564, 30.155, 1.000, 30.109, 29.409, 30.609, 30.135, 29.471, 29.914, 29.694, 29.722, 28.474, 28.203, 30.478, 30.222, 30.113, 29.411, 27.291, 29.899, 30.324, 30.068, 28.541, 30.107, 29.808, 28.988, 28.468, 28.322};

    private static double[] slopeList_24_2_ELISARFAST = slopeList_24_2_FT;

    private static double[] stdev_24_2_ELISARFAST = stdev_24_2_FT;

    private static double[] md5_24_2_ELISARFAST = md5_24_2_FT;

    private static double[] md2_24_2_ELISARFAST = md2_24_2_FT;

    private static double[] md1_24_2_ELISARFAST = md1_24_2_FT;

    private static double[] md05_24_2_ELISARFAST = md05_24_2_FT;

    private static double[] pd5_24_2_ELISARFAST = pd5_24_2_FT;

    private static double[] pd2_24_2_ELISARFAST = pd2_24_2_FT;

    private static double[] pd1_24_2_ELISARFAST = pd1_24_2_FT;

    private static double[] pd05_24_2_ELISARFAST = pd05_24_2_FT;


    //30_2 ELISAR ZEST

    //IN THIS DATASET. LIMITS FOR ZEST ARE SAME AS FOR FULL THRESHOLD


    private static double[] normalList_30_2_ELISARZEST = normalList_30_2_FT;


    private static double[] slopeList_30_2_ELISARZEST = slopeList_30_2_FT;

    private static double[] stdev_30_2_ELISARZEST = stdev_30_2_FT;

    private static double[] md5_30_2_ELISARZEST = md5_30_2_FT;

    private static double[] md2_30_2_ELISARZEST = md2_30_2_FT;

    private static double[] md1_30_2_ELISARZEST = md1_30_2_FT;

    private static double[] md05_30_2_ELISARZEST = md05_30_2_FT;

    private static double[] pd5_30_2_ELISARZEST = pd5_30_2_FT;

    private static double[] pd2_30_2_ELISARZEST = pd2_30_2_FT;

    private static double[] pd1_30_2_ELISARZEST = pd1_30_2_FT;

    private static double[] pd05_30_2_ELISARZEST = pd05_30_2_FT;


    //ELISARFASTTHRESHOLDS
    private static double[] normalList_30_2_ELISARFAST = new double[]{30.789, 30.065, 30.062, 28.748, 27.700, 29.012, 30.561, 30.202, 28.832, 27.034, 29.342, 28.945, 28.746, 28.349, 28.028, 28.009, 26.511, 25.970, 26.315, 28.689, 29.157, 27.761, 30.108, 31.112, 28.278, 28.794, 29.729, 29.488, 29.820, 27.488, 28.393, 28.836, 28.486, 26.370, 28.146, 27.294, 24.695, 26.381, 30.564, 30.155, 1.000, 30.109, 29.142, 29.409, 30.609, 30.135, 29.471, 28.600, 29.914, 29.694, 29.722, 29.228, 28.474, 28.203, 28.314, 26.965, 27.146, 30.478, 30.222, 30.113, 29.411, 27.291, 29.899, 30.324, 30.068, 28.541, 26.772, 30.107, 29.808, 28.988, 27.715, 28.468, 28.322, 26.963, 27.189, 26.075};
    private static double[] slopeList_30_2_ELISARFAST = slopeList_30_2_FT;

    private static double[] stdev_30_2_ELISARFAST = stdev_30_2_FT;

    private static double[] md5_30_2_ELISARFAST = md5_30_2_FT;

    private static double[] md2_30_2_ELISARFAST = md2_30_2_FT;

    private static double[] md1_30_2_ELISARFAST = md1_30_2_FT;

    private static double[] md05_30_2_ELISARFAST = md05_30_2_FT;

    private static double[] pd5_30_2_ELISARFAST = pd5_30_2_FT;

    private static double[] pd2_30_2_ELISARFAST = pd2_30_2_FT;

    private static double[] pd1_30_2_ELISARFAST = pd1_30_2_FT;

    private static double[] pd05_30_2_ELISARFAST = pd05_30_2_FT;


    //GLOBAL DEVIATION CUTOFFS

    private static double[] md30_2 = new double[]{
            -3.299120759,
            -3.635205266,
            -3.685317552,
            -3.78717363,
    };
    private static double[] md24_2 = new double[]{
            -3.323209276,
            -3.733193204,
            -3.7824907700,
            -3.8441536784,
    };
    private static double[] psd30_2 = new double[]{
            2.9420786,
            3.357149824,
            3.906408169,
            4.453621483,
    };
    private static double[] psd24_2 = new double[]{
            2.681379874,
            2.972170342,
            3.211354638,
            3.813732546,
    };


    //GHT CUTOFFS


    private static double[] ght_SumCutOffs = new double[]{20.02623, 22.19462, 16.60919, 20.4308, 18.5576, 35.97462, 13.10704, 16.77464, 15.90464, 13.47787};
    private static double[] diff_05 = new double[]{-31.6496, -12.6214, -15.0446, -14.618, -13.4779};
    private static double[] diff_15 = new double[]{-11.4614, -12.1697, -12.3425, -13.1322, -12.49};
    private static double[] diff_985 = new double[]{13.14754, 11.46426, 11.83366, 15.12478, 10.64617};
    private static double[] diff_9995 = new double[]{19.08123, 22.19462, 13.68744, 18.13643, 18.5576};


    //10-2

    private static double[] normalList_10_2_Algorithm_1 = new double[]{
            35.8533850826749, 35.638811654657, 35.2471562792273, 34.6784189563855, 33.9325996861318, 35.5018039438272, 35.2872305158093, 34.8955751403796, 34.3268378175378, 34.818851076898, 34.6042776488801, 34.2126222734504, 33.6438849506086, 33.8045264818873, 33.5899530538695, 33.1982976784397, 32.4588301587951, 35.8908765632807, 35.7512860964746, 35.4346136822566, 34.9408593206266, 34.2700230115846, 35.539295424433, 35.3997049576269, 35.0830325434089, 34.5892781817789,
            34.8563425575038, 34.7167520906977, 34.4000796764797, 33.9063253148497, 33.8420179624931, 33.702427495687, 33.385755081469, 32.4963216394009, 35.9110859740469, 35.7714955072408, 35.4548230930228, 34.9610687313928, 34.2902324223508, 35.5999236567316, 35.4603331899255, 35.1436607757075, 34.6499064140775, 34.9573896113348, 34.8177991445287, 34.5011267303107, 34.0073723686806, 33.9834838378565, 33.8438933710504, 33.5272209568323, 32.6782063362967, 35.8735944934411,
            35.6590210654232, 35.2673656899935, 34.6986283671517, 33.952809096898, 35.5624321761257, 35.3478587481079, 34.9562033726781, 34.3874660498364, 34.9198981307289, 34.7053247027111, 34.3136693272813, 33.7449320044396, 33.9459923572506, 33.7314189292328, 33.339763553803, 32.6407148556908
    };

    private static double[] slopeList_10_2_Algorithm_1 = new double[]{
            -0.0299861831470959, -0.0288710319700777, -0.028226883688964, -0.0280537383037549, -0.0283515958144505, -0.0312996697425223, -0.0301845185655041, -0.0295403702843904, -0.0293672248991814, -0.0327900326512831, -0.0316748814742649, -0.0310307331931512, -0.0308575878079422, -0.0344572718733784, -0.0333421206963601, -0.0326979724152465, -0.0363013874088081, -0.0315723372200187, -0.0336294941888462, -0.0361576540535782, -0.0391568168142148, -0.0426269824707561, -0.0328858238154451, -0.0349429807842726,
            -0.0374711406490046, -0.0404703034096412, -0.034376186724206, -0.0364333436930334, -0.0389615035577654, -0.0419606663184021, -0.0360434259463012, -0.0381005829151287, -0.0406287427798607, -0.0378875414817309, -0.0304357269379268, -0.0324928839067542, -0.0350210437714862, -0.0380202065321229, -0.0414903721886641, -0.0294759929691692, -0.0315331499379966, -0.0340613098027287, -0.0370604725633653, -0.0286931353137461, -0.0307502922825735, -0.0332784521473055, -0.0362776149079422, -0.0280871539716574,
            -0.0301443109404848, -0.0326724708052168, -0.0276580489429031, -0.0288495728650039, -0.0277344216879857, -0.027090273406872, -0.026917128021663, -0.0272149855323585, -0.0278898388962464, -0.0267746877192281, -0.0261305394381145, -0.0259573940529054, -0.0271069812408232, -0.025991830063805, -0.0253476817826913, -0.0251745363974823, -0.0265009998987345, -0.0253858487217163, -0.0247417004406026, -0.0260718948699802
    };

    private static double[] stdev_10_2_Algorithm_1 = new double[]{
            0.606844821204749, 0.608920901938803, 0.601243385754696, 0.585811999595175, 0.590611905783991, 0.613709834508959, 0.624805003582719, 0.615355356142824, 0.624820862693547, 0.688125536297147, 0.690866379387245, 0.70153877607168, 0.696480995475695, 0.748094930633456, 0.783445069409201, 0.767241676719961, 1.21204857372626, 0.602040037976215, 0.616608583753113, 0.625170600040665, 0.641040165565869, 0.645551401336816, 0.612128934254533, 0.600260881564403, 0.606879500630301, 0.587875384106412, 0.657879176296858, 0.652630159593905,
            0.617786913862605, 0.607654500418492, 0.727280896173711, 0.712529906500357, 0.682236072922082, 0.815993168291834, 0.61318742705022, 0.616973502430524, 0.616168171768008, 0.621913003913735, 0.615638021063491, 0.632154743821601, 0.628544650675358, 0.628158721008012, 0.637248313041012, 0.669577266118507, 0.700224910229069, 0.711319479068775, 0.694894555192579, 0.912751662269419, 0.974786882309635, 1.19249050672074, 1.57589705896389, 0.63391447295551, 0.625032232899654, 0.624179267657073, 0.63945864809924, 0.631689969172686,
            0.629530349652572, 0.637701934907748, 0.630817819257907, 0.626662031155476, 0.67322815713083, 0.651121199620924, 0.653763563645253, 0.643735496710001, 0.822110681545698, 0.765902315438088, 0.722324043269305, 1.22173533723866
    };

    private static double[] td5_10_2_Algorithm_1 = new double[]{
            -3.50400684105554, -1.26717890358955, -1.93460618769044, -1.76252363008924, -1.56552585224215, -2.13040157957647, -1.50360629930775, -1.8764323655681, -2.54566963521961, -2.52521709169995, -1.70787850315845, -1.55066954446268, -1.95665629577716, -2.75754279790698, -0.929620891547039, -1.57347183971564, -1.58396672224279, -3.65871232182539, -1.82025562831559, -1.57395298713672, -2.11163550690773, -2.30239050949844, -1.82970063329885, -1.36303881264857, -1.90970638576661, -2.44853538039565, -2.85815893332805, -1.94685836783968, -2.31305014982324,
            -2.49926932320804, -2.92526523879166, -2.58227035798225, -3.01368919969609, -2.92559660761545, -2.0545283504057, -1.6894824731459, -1.39326459131702, -2.04140793312434, -2.88379083540829, -1.89031606451979, -1.65939118150039, -1.47806272635403, -1.83049031490057, -2.2113680931774, -2.11976750971428, -2.37746755263831, -2.28323942454076, -2.27016744558538, -2.06617014878588, -2.52032212462366, -2.10974359948951, -2.54939909893737, -1.94671467381176, -2.46007554246868, -2.7631321909574, -2.41244091576656, -2.30738942579465, -1.76161658460147, -2.27419629334336,
            -2.45708557172869, -3.11211008975241, -2.03842862433757, -1.83589947935043, -1.62718258839139, -2.24425456107846, -1.95948668845701, -1.97897002956988, -1.97084036652754
    };

    private static double[] td2_10_2_Algorithm_1 = new double[]{
            -3.88314123779458, -1.77999490539625, -2.14077534615463, -1.99980204113785, -2.17786140154336, -2.66922833151455, -1.65755092460289, -2.32445107464758, -3.50335660170994, -3.46148709163029, -1.87022248097304, -1.63510161604405, -2.23829865868534, -3.34714465528736, -1.21098621088179, -2.03726112746466, -2.11678851091397, -3.98466154996659, -2.45945383418864, -2.32864209745409, -2.52765800927187, -2.60197167894798, -2.34458472767409, -1.62622541109254, -2.20331389859307, -2.64834523973751, -2.92578958213527, -2.26870689487431, -2.39938512121666, -3.33094505178684, -3.41146644640608,
            -2.83820425852601, -3.19887315242552, -3.53098731791116, -2.31153732557933, -1.83293135403027, -1.46900778997238, -2.14187856086688, -3.26608424714045, -2.0646479388259, -1.83926233189503, -1.88930376303459, -2.00843914952194, -2.23960213832612, -2.33969399609582, -2.67628310891394, -2.79332136361435, -2.5203871686926, -2.2414877132543, -2.77276558065317, -2.35181541477166, -3.11839732104757, -2.20902995929673, -2.61279552681075, -2.88850324284679, -2.66173018324296, -2.71289445685867, -2.0339098205318, -2.76500353098384, -2.59584286660106, -3.23865486299498, -2.12525734330337, -2.37119417911619,
            -2.35699350320561, -2.46384548918702, -2.23832485081634, -2.31557683788752, -2.20683100798701
    };

    private static double[] td1_10_2_Algorithm_1 = new double[]{
            -4.45184283290313, -2.54921890810631, -2.45002908385092, -2.35571965771077, -3.09636472549517, -3.47746845942167, -1.8884678625456, -2.9964791382668, -4.93988705144544, -4.8658920915258, -2.11373844769492, -1.76174972341611, -2.6607622030476, -4.23154744135794, -1.63303418988391, -2.7329450590882, -2.91602119392073, -4.4735853921784, -3.41825114299821, -3.46067576293015, -3.15169176281807, -3.0513434331223, -3.11691086923694, -2.0210053087585, -2.64372516783277, -2.9480600287503, -3.02723555534611, -2.75147968542626, -2.52888757830679, -4.57845864465504, -4.14076825782771, -3.22210510934166, -3.47664908151966, -4.43907338335473,
            -2.69705078833977, -2.04810467535683, -1.58262258795543, -2.29258450248068, -3.8395243647387, -2.32614575028507, -2.10906905748698, -2.50616531805543, -2.275362401454, -2.28195320604921, -2.66958372566812, -3.12450644332739, -3.55844427222473, -2.89571675335342, -2.50446405995693, -3.15143076469744, -2.71492313769488, -3.97189465421287, -2.60250288752418, -2.84187550332386, -3.07655982068088, -3.03566408445756, -3.32115200345471, -2.44234967442729, -3.50121438744456, -2.80397880890962, -3.42847202285884, -2.25550042175207, -3.17413622876484, -3.45170987542693, -2.79323188134985, -2.65658209435533, -2.82048705036397, -2.56081697017622
    };

    private static double[] td05_10_2_Algorithm_1 = new double[]{
            -4.73803537180256, -2.79086944569586, -2.49575663542704, -2.51210201758056, -3.5041534811534, -3.83154842115109, -1.97102200225382, -3.35303343880074, -5.17817044855433, -5.87506562099903, -2.18703743373973, -1.83904887028665, -2.7357461414209, -4.50154744135794, -1.67804605282399, -2.95880279632762, -3.16105555893018, -4.735060861129, -3.67677227663757, -3.97138806314675, -3.27367899526033, -3.27530629205388, -3.44018590381796, -2.31930912319375, -2.91372516783277, -3.1962060649091, -3.06519629495772, -2.80506562388964, -2.53590708825782, -4.68984732597148, -4.43272000799275, -3.40980785024498, -3.61076794114885, -4.56585847655379, -2.98230375386933, -2.0812315516766,
            -1.6256862243162, -2.39116990464273, -3.98401318290346, -2.46085094255659, -2.25987375072135, -2.56464458418049, -2.29554590162515, -2.28970035258393, -2.74430693591477, -3.31363980460943, -3.85782914030017, -3.22337786932769, -2.6944886099379, -3.50617785523185, -2.9774554644803, -4.4755761944194, -2.81259653667813, -2.86381862478343, -3.2012073293639, -3.07240431492624, -3.59115200345471, -2.71234967442729, -4.06238012438944, -2.93380888102393, -3.52361752701413, -2.30462498057266, -3.85101371039137, -3.70811562577229, -3.06133162238883, -2.80051985660746, -2.93684109062783, -2.7227234373188
    };

    private static double[] pd5_10_2_Algorithm_1 = new double[]{
            -3.45836976989474, -2.40818218891686, -2.63416828856862, -3.23623832160194, -3.21468424244775, -3.0909150195542, -2.10445649214729, -2.43401492257443, -3.78477586035719, -3.05782180702716, -2.6587384506615, -2.46616261363643, -3.15629412401098, -3.30573212119415, -2.65535976656214, -3.06497823702429, -2.92460927612146, -4.47900072617183, -2.99754469681755, -2.32313652565899, -3.18571642515646, -3.46927849106834, -3.19803948713242, -2.33566710716429, -2.55426013076422, -3.13627139334803, -3.48950510857314, -2.54294530525056, -2.78012148347656, -3.57399016777314, -4.285690449643, -3.49184947255706, -3.65888680567539, -4.10192406339845, -2.63701891559971, -2.29217597310855,
            -2.32036146842845, -2.98436374037435, -3.42915122631501, -2.72672112802831, -2.10063309879842, -2.84120017906233, -2.84975907726236, -3.12813356748599, -3.00321324127523, -3.28210754056582, -3.81305446080464, -2.91726019525098, -2.9455354238026, -4.13378798629596, -3.19591972654014, -3.63059145769153, -2.7121089745769, -2.77465824902126, -3.10013587822416, -3.37032126670864, -3.19970147107121, -2.43542403007662, -2.91643892821176, -3.00383666949049, -3.54249651216244, -2.87359434275364, -2.40744354982589, -3.00937116960652, -3.22472878005227, -2.73229097358417, -3.21655540820058, -2.79259378258541,
    };
    private static double[] pd2_10_2_Algorithm_1 = new double[]{
            -4.33257090446753, -2.88232777665529, -3.07148688314191, -3.37398200451283, -3.43274654505383, -3.37315933964564, -2.2609994782023, -2.83374123948863, -4.36369971477124, -3.9275023223481, -2.81978906904861, -2.57813309770771, -3.3574749401454, -4.08324587866582, -2.81554097307186, -3.31379993498015, -3.20395877758477, -4.85141329343321, -3.48384785781108, -2.96471498551182, -3.65657635960147, -4.2081516125198, -3.5261155947294, -2.55659660382817, -3.05487132577724, -3.69602379717423, -3.61451257700246, -2.70794141881824, -2.9305573853494, -4.05334902054702, -4.42524352252965, -3.7787059764712, -4.24537263377458, -4.31435525340208, -2.979052247217, -2.4561338485701, -2.61240407050301, -3.34668317048175,
            -4.26866624622481, -3.36838457295041, -2.62813557534784, -2.97096630224657, -3.25804217580827, -3.25335093672391, -3.42832287977492, -3.69084842564008, -4.02743639452859, -3.03238234001032, -3.58236102706822, -4.37856069596909, -3.45914359178222, -3.88447563445622, -3.1247670217326, -3.04490487881769, -3.46525344623117, -3.48020214313651, -3.51873809185173, -2.51513691836516, -3.27934686235938, -3.40941679086213, -3.81871262430366, -3.00718041364064, -2.78157409831464, -3.26721748863305, -3.51575023908777, -2.9393069935773, -3.33949178725518, -3.07628162139771
    };
    private static double[] pd1_10_2_Algorithm_1 = new double[]{
            -5.64387260632671, -3.59354615826293, -3.72746477500185, -3.58059752887917, -3.75983999896294, -3.79652581978279, -2.49581395728481, -3.43333071485994, -5.23208549639231, -5.23202309532952, -3.06136499662928, -2.74608882381463, -3.65924616434704, -5.24951651487332, -3.05581278283643, -3.68703248191394, -3.62298302977974, -5.41003214432529, -4.21330259930138, -3.92708267529106, -4.36286626126898, -5.31646129469698, -4.01822975612486, -2.88799084882398, -3.80578811829677, -4.53565240291352, -3.80202377964644, -2.95543558916976, -3.15621123815866, -4.77238729970784, -4.63457313185963, -4.20899073234241, -5.12510137592336, -4.63300203840752, -3.49210224464294, -2.70207066176242, -3.05046797361486,
            -3.89016231564286, -5.5279387760895, -4.33087974033355, -3.41938929017198, -3.16561548702293, -3.87046682362714, -3.44117699058079, -4.06598733752446, -4.30395975325147, -4.34900929511451, -3.20506555714933, -4.53759943196666, -4.74571976047878, -3.85397938964534, -4.26530189960326, -3.74375409246616, -3.45027482351233, -4.01292979824168, -3.64502345777832, -3.99729302302251, -2.63470625079796, -3.8237087635808, -4.01778697291958, -4.23303679251548, -3.20755951997115, -3.34276992104776, -3.65398696717285, -3.95228242764101, -3.24983102356699, -3.52389635583707, -3.50181337961615
    };
    private static double[] pd05_10_2_Algorithm_1 = new double[]{
            -5.6490743813288, -3.98008189019557, -4.27277718100584, -3.67287263380965, -4.05385877066446, -4.05006894581869, -2.53730901443975, -3.63045107158435, -5.27100141530923, -6.25819245110904, -3.25125627454942, -2.79431103204198, -3.70181312914789, -5.29520897708365, -3.06919970353146, -3.69735579300981, -3.80859673815482, -5.50093603733395, -4.4783965191109, -4.60869003364895, -4.95180326116506, -5.48040223952049, -4.29494386158367, -3.08073804441586, -4.02180319937718, -4.93567877186924, -3.82260207960625, -3.1018706176799, -3.24493649783079, -4.84580349798492, -4.72882127947794, -4.22270181282727, -5.50753110502997, -4.72181464856723, -3.78392799634265, -2.72078778432805, -3.18699862742479, -4.2624958279031,
            -5.63318551976784, -4.62542719723495, -3.98757088374313, -3.19768994147142, -4.12825827722219, -3.5060368961103, -4.51504575852221, -4.3935305636729, -4.60696118468166, -3.25421311977863, -4.78359331262204, -4.8136941969029, -3.98792845856642, -4.49694504488326, -4.16789913811714, -3.5314813890891, -4.43835652860617, -3.70994532765348, -4.23461371938253, -2.68468881116561, -4.09978816101054, -4.15389848903579, -4.44192411512639, -3.23492914882588, -3.80999578430149, -3.68391939941391, -3.95936620159721, -3.26357650515295, -3.65839653468753, -3.51887206916488
    };
    private static double[] md_10_2_Algorithm_1 = new double[]{
            -1.262523, -1.360685, -1.507928, -1.536931
    };
    private static double[] psd_10_2_Algorithm_1 = new double[]{
            1.455999, 1.576483, 1.757209, 1.88565
    };

    //*********//***********//*********//

    /*public double getNormalDeviation(int index,double value,String Pattern){
        double normDeviation = 0;
        if(Pattern.equals("24-2")){
            //todo : make the formula for age correction
            normDeviation = value-normalList24_2[index];
        }else if(Pattern.equals("30-2")){
            //todo : make the formula for age correction
            normDeviation = value-normalList30_2[index];
        }else if(Pattern.equals("10-2")){
            //todo : make the formula for age correction
            normDeviation = value-normalList10_2[index];
        }else if(Pattern.equals("Macula")){
            //todo : make the formula for age correction
            normDeviation = value-normalListMacula[index];
        }
        return normDeviation;
    }*/
    public static double[][] getNormDeviationVector(int patAge, int modeTypeNo, double[] resList) {

        double[][] normDevVector = new double[][]{new double[resList.length], new double[resList.length], new double[resList.length], new double[resList.length], new double[3], new double[3], new double[2]};
        double[] normalList = new double[resList.length];
        double[] slopeList = new double[resList.length];
        double[][] cutOffs = new double[resList.length][10];
        double[] md5 = new double[resList.length];
        double[] md2 = new double[resList.length];

        double[] md1 = new double[resList.length];
        double[] md05 = new double[resList.length];
        double[] pd5 = new double[resList.length];
        double[] pd2 = new double[resList.length];
        double[] pd1 = new double[resList.length];
        double[] pd05 = new double[resList.length];
        double[] ghtSumList = new double[resList.length];
        double[] tmd = new double[4];
        double[] psd = new double[4];
        double[] stdevList = new double[resList.length];
        double[] globalCutOffs = new double[15];
        int[] removeElements;
        int BSpot_Index1 = 0;
        int BSpot_Index2 = 0;
        int Bspot_Index3 = 0;
        double numOfPointsForGlobalParams = 1.0;
        double sup1Sum = 0.0;
        double sup2Sum = 0.0;
        double sup3Sum = 0.0;
        double sup4Sum = 0.0;
        double sup5Sum = 0.0;
        double inf1Sum = 0.0;
        double inf2Sum = 0.0;
        double inf3Sum = 0.0;
        double inf4Sum = 0.0;
        double inf5Sum = 0.0;
        double gh995 = 5.647115568;
        double gh005 = -2.031771084;
        //get pattern
        Log.e("NormativeData", " " + modeTypeNo);
        int pattern_stratNumber = modeTypeNo % 100;   //Pattern_Strat Number is 33 mode number is 1133
        Log.e("NormativeData", "Pattern_Strat Number is " + pattern_stratNumber + "mode number is " + modeTypeNo);
        CommonUtils.writeToTotalDeviationFile("\n\nPattern_Strat Number is " + pattern_stratNumber + "mode number is " + modeTypeNo);
        CommonUtils.writeToTotalDeviationFile("\nAge of patient is " + patAge);
        switch (pattern_stratNumber) {
            case 11:
                //24-2 pattern screening. do nothing
                Log.e("normative database", "24-2 screening has no total dev vector");
                normalList = normalList_24_2_FT;
                slopeList = slopeList_24_2_FT;
                stdevList = stdev_24_2_FT;

                BSpot_Index1 = 16;
                BSpot_Index2 = 29;
                Bspot_Index3 = 33;
                md5 = md5_24_2_FT;
                md2 = md2_24_2_FT;
                md1 = md1_24_2_FT;
                md05 = md05_24_2_FT;

                pd5 = pd5_24_2_FT;
                pd2 = pd2_24_2_FT;
                pd1 = pd1_24_2_FT;
                pd05 = pd05_24_2_FT;

                tmd = md24_2;
                psd = psd24_2;

                numOfPointsForGlobalParams = 51.0;

                break;
            case 12:
                Log.d("NormativeData", "24-2 full threshold has been entered");
                //24-2 pattern full threshold strategy
                Log.e("normative database", "24-2 screening has no total dev vector");
                normalList = normalList_24_2_FT;
                slopeList = slopeList_24_2_FT;
                stdevList = stdev_24_2_FT;

                BSpot_Index1 = 16;
                BSpot_Index2 = 29;
                Bspot_Index3 = 33;
                md5 = md5_24_2_FT;
                md2 = md2_24_2_FT;
                md1 = md1_24_2_FT;
                md05 = md05_24_2_FT;

                pd5 = pd5_24_2_FT;
                pd2 = pd2_24_2_FT;
                pd1 = pd1_24_2_FT;
                pd05 = pd05_24_2_FT;

                tmd = md24_2;
                psd = psd24_2;

                numOfPointsForGlobalParams = 51.0;
                break;
            case 13:
                //24-2 elisar zest

                normalList = normalList_24_2_ELISARZEST;
                slopeList = slopeList_24_2_ELISARZEST;
                stdevList = stdev_24_2_ELISARZEST;

                BSpot_Index1 = 16;
                BSpot_Index2 = 29;
                Bspot_Index3 = 33;
                md5 = md5_24_2_ELISARZEST;
                md2 = md2_24_2_ELISARZEST;
                md1 = md1_24_2_ELISARZEST;
                md05 = md05_24_2_ELISARZEST;

                pd5 = pd5_24_2_ELISARZEST;
                pd2 = pd2_24_2_ELISARZEST;
                pd1 = pd1_24_2_ELISARZEST;
                pd05 = pd05_24_2_ELISARZEST;

                tmd = md24_2;
                psd = psd24_2;

                numOfPointsForGlobalParams = 51.0;
                break;
            case 14:
                //24-2 elisar fast
                normalList = normalList_24_2_ELISARFAST;
                slopeList = slopeList_24_2_ELISARFAST;
                stdevList = stdev_24_2_ELISARFAST;

                BSpot_Index1 = 16;
                BSpot_Index2 = 29;
                Bspot_Index3 = 33;
                md5 = md5_24_2_ELISARFAST;
                md2 = md2_24_2_ELISARFAST;
                md1 = md1_24_2_ELISARFAST;
                md05 = md05_24_2_ELISARFAST;

                pd5 = pd5_24_2_ELISARFAST;
                pd2 = pd2_24_2_ELISARFAST;
                pd1 = pd1_24_2_ELISARFAST;
                pd05 = pd05_24_2_ELISARFAST;

                tmd = md24_2;
                psd = psd24_2;

                numOfPointsForGlobalParams = 51.0;
                break;
            case 21:
                //30-2 screening. chillify
                normalList = normalList_30_2_FT;
                slopeList = slopeList_30_2_FT;
                stdevList = stdev_30_2_FT;
                BSpot_Index1 = 21;
                BSpot_Index2 = 40;
                Bspot_Index3 = 45;
                md5 = md5_30_2_FT;
                md2 = md2_30_2_FT;
                md1 = md1_30_2_FT;
                md05 = md05_30_2_FT;

                pd5 = pd5_30_2_FT;
                pd2 = pd2_30_2_FT;
                pd1 = pd1_30_2_FT;
                pd05 = pd05_30_2_FT;

                tmd = md30_2;
                psd = psd30_2;

                numOfPointsForGlobalParams = 73.0;


                break;
            case 22:
                //30-2 full threshold
                //30-2 screening. chillify
                normalList = normalList_30_2_FT;
                slopeList = slopeList_30_2_FT;
                stdevList = stdev_30_2_FT;
                BSpot_Index1 = 21;
                BSpot_Index2 = 40;
                Bspot_Index3 = 45;
                md5 = md5_30_2_FT;
                md2 = md2_30_2_FT;
                md1 = md1_30_2_FT;
                md05 = md05_30_2_FT;

                pd5 = pd5_30_2_FT;
                pd2 = pd2_30_2_FT;
                pd1 = pd1_30_2_FT;
                pd05 = pd05_30_2_FT;

                tmd = md30_2;
                psd = psd30_2;

                numOfPointsForGlobalParams = 73.0;
                break;
            case 23:
                //30-2 elisar zest
                //30-2 screening. chillify
                normalList = normalList_30_2_ELISARZEST;
                slopeList = slopeList_30_2_ELISARZEST;
                stdevList = stdev_30_2_ELISARZEST;
                BSpot_Index1 = 21;
                BSpot_Index2 = 40;
                Bspot_Index3 = 45;
                md5 = md5_30_2_ELISARZEST;
                md2 = md2_30_2_ELISARZEST;
                md1 = md1_30_2_ELISARZEST;
                md05 = md05_30_2_ELISARZEST;

                pd5 = pd5_30_2_ELISARZEST;
                pd2 = pd2_30_2_ELISARZEST;
                pd1 = pd1_30_2_ELISARZEST;
                pd05 = pd05_30_2_ELISARZEST;

                tmd = md30_2;
                psd = psd30_2;

                numOfPointsForGlobalParams = 73.0;
                break;
            case 24:
                //30-2 screening. chillify
                normalList = normalList_30_2_ELISARFAST;
                slopeList = slopeList_30_2_ELISARFAST;
                stdevList = stdev_30_2_ELISARFAST;
                BSpot_Index1 = 21;
                BSpot_Index2 = 40;
                Bspot_Index3 = 45;
                md5 = md5_30_2_ELISARFAST;
                md2 = md2_30_2_ELISARFAST;
                md1 = md1_30_2_ELISARFAST;
                md05 = md05_30_2_ELISARFAST;

                pd5 = pd5_30_2_ELISARFAST;
                pd2 = pd2_30_2_ELISARFAST;
                pd1 = pd1_30_2_ELISARFAST;
                pd05 = pd05_30_2_ELISARFAST;

                tmd = md30_2;
                psd = psd30_2;

                numOfPointsForGlobalParams = 73.0;
                break;
            case 33:
            case 31:
                CommonUtils.writeToTotalDeviationFile("pattern_stratNumber " + pattern_stratNumber + " executed");
                normalList = normalList_10_2_Algorithm_1;
                slopeList = slopeList_10_2_Algorithm_1;
                stdevList = stdev_10_2_Algorithm_1;
                BSpot_Index1 = 100; // Not applicable
                BSpot_Index2 = 100;// Not applicable
                Bspot_Index3 = 105;// Not applicable
                md5 = td5_10_2_Algorithm_1;
                md2 = td2_10_2_Algorithm_1;
                md1 = td1_10_2_Algorithm_1;
                md05 = td05_10_2_Algorithm_1;

                pd5 = pd5_10_2_Algorithm_1;
                pd2 = pd2_10_2_Algorithm_1;
                pd1 = pd1_10_2_Algorithm_1;
                pd05 = pd05_10_2_Algorithm_1;

                tmd = md_10_2_Algorithm_1;
                psd = psd_10_2_Algorithm_1;

                numOfPointsForGlobalParams = 68.0;
                break;

        }
        //get age corrected normal
        double[] ageCorrVals = normalList.clone();
        //ageCorrVals = normalList;
        double AgeVal = patAge;
        Log.e("AgeVal", "" + AgeVal);
        Log.d("NormativeData", "Entered here and ageVal is " + AgeVal);
        if (pattern_stratNumber == 31 || pattern_stratNumber == 33) { //10-2
            for (int i = 0; i < ageCorrVals.length; i++) {
                Log.d("NormativeData", "normavalValue " + i + " is " + normalList[i]);
                Log.d("NormativeData", "slopevalue " + i + " is " + slopeList[i]);
                Log.d("NormativeData", "uncorrected Age value " + i + " is " + ageCorrVals[i]);
                ageCorrVals[i] = resList[i] + (AgeVal * abs(slopeList[i]));
                Log.d("NormativeData", "ageCorrMeanValue " + i + " is " + ageCorrVals[i]);
            }
        } else {  //24-2 and 30-2
            for (int i = 0; i < ageCorrVals.length; i++) {
                Log.d("NormativeData", "normavalValue " + i + " is " + normalList[i]);
                Log.d("NormativeData", "slopevalue " + i + " is " + slopeList[i]);
                Log.d("NormativeData", "uncorrected Age value " + i + " is " + ageCorrVals[i]);
                ageCorrVals[i] = resList[i] + (50 - AgeVal) * slopeList[i];
                Log.d("NormativeData", "ageCorrMeanValue " + i + " is " + ageCorrVals[i]);
            }
        }
        CommonUtils.writeToTotalDeviationFile("\nResList \n" + Arrays.toString(resList));
        CommonUtils.writeToTotalDeviationFile("\nAgeCorrected Means\n" + Arrays.toString(ageCorrVals));
        CommonUtils.writeToTotalDeviationFile("\nGlobalCutOffs \n" + Arrays.toString(globalCutOffs));
        CommonUtils.writeToTotalDeviationFile("\nNormalList \n" + Arrays.toString(normalList));
        CommonUtils.writeToTotalDeviationFile("\nSlopeList \n" + Arrays.toString(slopeList));
        CommonUtils.writeToTotalDeviationFile("\nAgeCorrectedMeans \n" + Arrays.toString(ageCorrVals));
        //calculate total deviation
        //Log.e("ageCorrVals", "length " + ageCorrVals.length);
        //Log.e("resList", "length " + resList.length);
        //Log.e("normDevVector", "length " + normDevVector.length);
        for (int i = 0; i < resList.length; i++) {
            //get value
            normDevVector[0][i] = ageCorrVals[i] - normalList[i];
            Log.d("NormativeData", "normDevVector of the index " + i + " is " + normDevVector[0][i]);
            //get probability value
            if (normDevVector[0][i] < md05[i]) {
                normDevVector[1][i] = 0.4;
            } else if (md05[i] <= normDevVector[0][i] && normDevVector[0][i] < md1[i]) {
                normDevVector[1][i] = 0.9;
            } else if (md1[i] <= normDevVector[0][i] && normDevVector[0][i] < md2[i]) {
                normDevVector[1][i] = 1.8;
            } else if (md2[i] <= normDevVector[0][i] && normDevVector[0][i] < md5[i]) {
                normDevVector[1][i] = 4.5;
            } else if (md5[i] <= normDevVector[0][i]) {
                normDevVector[1][i] = 97;
            }
        }
        //get pattern deviation vals
        //list of elements that are to be ignored
        switch (resList.length) {
            case 54:
                removeElements = new int[]{16, 29, 33};
                break;
            case 76:
                //removeElements = new int[]{21, 40, 9, 13, 16, 17, 18, 23, 28, 32, 35, 36, 37, 42, 47, 51, 54, 55, 56, 66, 70, 73, 74, 75};
                removeElements = new int[]{21, 40, 45, 9, 13, 16, 17, 18, 23, 28, 32, 35, 36, 37, 42, 47, 51, 54, 55, 56, 66, 70, 73, 74, 75};
                break;
            case 68:
                removeElements = new int[]{};
                break;
            default:
                removeElements = new int[]{100};
                break;
        }
        double[] defectDepthFinder = new double[normDevVector[0].length - removeElements.length];
        //create list for sorting
        int j = -1;
        CommonUtils.writeToLogFile("normDevVector[0].length " + normDevVector[0].length);
        CommonUtils.writeToLogFile("removeElements.length " + removeElements.length);
        for (int i = 0; i < normDevVector[0].length; i++) {
            //check if index must be ignored.
            boolean processI = true;
            for (int removeElement : removeElements) {
                if (removeElement - i == 0) {
                    processI = false;
                    break;
                }
            }
            if (processI) {
                j = j + 1;
                defectDepthFinder[j] = normDevVector[0][i];
            }
        }
        CommonUtils.writeToTotalDeviationFile("\ndefectDepthVal before sort \n" + Arrays.toString(defectDepthFinder));
        // remove elements related to the blindspot
        Arrays.sort(defectDepthFinder);

        CommonUtils.writeToTotalDeviationFile("\ndefectDepthVal after sort \n" + Arrays.toString(defectDepthFinder));
        double defectDepthVal;
        if (pattern_stratNumber == 31 || pattern_stratNumber == 33) {
            defectDepthVal = defectDepthFinder[56] + 0.95 * (defectDepthFinder[57] - defectDepthFinder[56]);
        } else {
            defectDepthVal = defectDepthFinder[42] + (0.5 * (defectDepthFinder[43] - defectDepthFinder[42]));
        }

        //double defectDepthVal = defectDepthFinder[defectDepthFinder.length - 7];
        CommonUtils.writeToTotalDeviationFile("\ndefectDepthVal " + defectDepthVal + "\n");
        //calculate pattern deviation
        for (int i = 0; i < resList.length; i++) {
            //CommonUtils.writeToTotalDeviationFile("\nI value : " + i);
            //get value
            normDevVector[2][i] = normDevVector[0][i] - defectDepthVal;
            //get probability value
            //CommonUtils.writeToTotalDeviationFile("\nnormDevVector[2][i] " + normDevVector[2][i]);
            //CommonUtils.writeToTotalDeviationFile("\nnormDevVector[3][i] " + normDevVector[3][i]);
            //CommonUtils.writeToTotalDeviationFile("\npd05[i] " + pd05[i]);
            //CommonUtils.writeToTotalDeviationFile("\npd1[i] " + pd1[i]);
            //CommonUtils.writeToTotalDeviationFile("\npd2[i] " + pd2[i]);
            //CommonUtils.writeToTotalDeviationFile("\npd5[i] " + pd5[i]);
            if (normDevVector[2][i] < pd05[i]) {
                //CommonUtils.writeToTotalDeviationFile("\n  normDevVector[2][i] < pd05[i]  is true");
                normDevVector[3][i] = 0.4;
            } else if (pd05[i] <= normDevVector[2][i] && normDevVector[2][i] < pd1[i]) {
                //CommonUtils.writeToTotalDeviationFile("\n pd05[i] <= normDevVector[2][i] && normDevVector[2][i] < pd1[i] is true");
                normDevVector[3][i] = 0.9;
            } else if (pd1[i] <= normDevVector[2][i] && normDevVector[2][i] < pd2[i]) {
                //CommonUtils.writeToTotalDeviationFile("\n pd1[i] <= normDevVector[2][i] && normDevVector[2][i] < pd2[i] is true");
                normDevVector[3][i] = 1.8;
            } else if (pd2[i] <= normDevVector[2][i] && normDevVector[2][i] < pd5[i]) {
                //CommonUtils.writeToTotalDeviationFile("\n pd2[i] <= normDevVector[2][i] && normDevVector[2][i] < pd5[i] is true");
                normDevVector[3][i] = 4.5;
            } else if (pd5[i] <= normDevVector[2][i]) {
                //CommonUtils.writeToTotalDeviationFile("\n pd5[i] <= normDevVector[2][i] is true");
                normDevVector[3][i] = 97;
            }

            //CommonUtils.writeToTotalDeviationFile("\nnormDevVector[3][i] " + normDevVector[3][i] + "\n");

        }
        //calcualate mean and pattern standard devation
        //MD
        double sumTermMDNum = 0;
        double sumTermMDDen = 0;
        double sumMSValue = 0;
        for (int i = 0; i < normDevVector[0].length; i++) {
            if (i != BSpot_Index1 && i != BSpot_Index2 && i != Bspot_Index3) {
                sumTermMDNum = ((ageCorrVals[i] - normalList[i]) / ((stdevList[i]) * (stdevList[i]))) + sumTermMDNum;

                sumTermMDDen = (1 / ((stdevList[i]) * (stdevList[i]))) + sumTermMDDen;
                sumMSValue = resList[i] + sumMSValue;
            }

        }
        Log.d("NormativeData", "MD Num" + sumTermMDNum);
        Log.d("NormativeData", "MD Den" + sumTermMDDen);
        CommonUtils.writeToTotalDeviationFile("\nMD Num " + sumTermMDNum + "\n");
        CommonUtils.writeToTotalDeviationFile("\nMD Den " + sumTermMDDen + "\n");
        normDevVector[4][0] = sumMSValue / numOfPointsForGlobalParams;
        CommonUtils.writeToTotalDeviationFile("\nsumMSValue " + sumMSValue + "\n");
        CommonUtils.writeToTotalDeviationFile("\nnumOfPointsForGlobalParams " + numOfPointsForGlobalParams + "\n");
        CommonUtils.writeToTotalDeviationFile("\nsumMSValue / numOfPointsForGlobalParam " + (normDevVector[4][0]) + "\n");

        normDevVector[4][1] = ((1 / numOfPointsForGlobalParams) * sumTermMDNum) / ((1 / numOfPointsForGlobalParams) * sumTermMDDen);
        Log.d("NormativeData", "MD Val" + normDevVector[4][1]);
        CommonUtils.writeToTotalDeviationFile("\nMD Val " + (normDevVector[4][1]) + "\n");

        //PSD
        double sumTermPSD1 = 0;
        double sumTermPSD2 = 0;
        for (int i = 0; i < normDevVector[0].length; i++) {
            if (i != BSpot_Index1 && i != BSpot_Index2 && i != Bspot_Index3) {
                sumTermPSD1 = (((ageCorrVals[i] - normalList[i] - normDevVector[4][1]) * (ageCorrVals[i] - normalList[i] - normDevVector[4][1])) / ((stdevList[i]) * (stdevList[i]))) + sumTermPSD1;
                sumTermPSD2 = ((stdevList[i]) * (stdevList[i])) + sumTermPSD2;

            }
        }

        Log.d("NormativeData", "PSD1" + sumTermPSD1);
        Log.d("NormativeData", "PS2 " + sumTermPSD2);
        CommonUtils.writeToTotalDeviationFile("\nPSD1" + sumTermPSD1 + "\n");
        CommonUtils.writeToTotalDeviationFile("\nPSD2 " + sumTermPSD2 + "\n");
        normDevVector[4][2] = Math.sqrt(((1 / numOfPointsForGlobalParams) * sumTermPSD2) * ((1 / (numOfPointsForGlobalParams - 1)) * sumTermPSD1));
        Log.d("NormativeData", "PSD Val" + normDevVector[4][2]);
        CommonUtils.writeToTotalDeviationFile("\nPSD Val " + normDevVector[4][2] + "\n");
        //global deviation prob vals
        if (resList.length > 17) {//prob vals only for 10-2,24-2 and 30-2{
            if (normDevVector[4][1] < tmd[3]) {
                normDevVector[5][1] = 0.4;
            } else if (tmd[3] <= normDevVector[4][1] && normDevVector[4][1] < tmd[2]) {
                normDevVector[5][1] = 0.9;
            } else if (tmd[3] <= normDevVector[4][1] && normDevVector[4][1] < tmd[1]) {
                normDevVector[5][1] = 1.8;
            } else if (tmd[1] <= normDevVector[4][1] && normDevVector[4][1] < tmd[0]) {
                normDevVector[5][1] = 4.8;
            } else if (tmd[0] <= normDevVector[4][1]) {
                normDevVector[5][1] = 98;
            }

            if (normDevVector[4][2] > psd[3]) {
                normDevVector[5][2] = 0.4;
            } else if (psd[3] >= normDevVector[4][2] && normDevVector[4][2] > psd[2]) {
                normDevVector[5][2] = 0.9;
            } else if (psd[3] >= normDevVector[4][2] && normDevVector[4][2] > psd[1]) {
                normDevVector[5][2] = 1.8;
            } else if (psd[1] >= normDevVector[4][2] && normDevVector[4][2] > psd[0]) {
                normDevVector[5][2] = 4.8;
            } else if (psd[0] >= normDevVector[4][2]) {
                normDevVector[5][2] = 98;
            }
        }

        //Score the values
        for (int i = 0; i < resList.length; i++) {
            ghtSumList[i] = 0;
            if (normDevVector[3][i] < 1) {
                ghtSumList[i] = (10 * normDevVector[2][i]) / pd1[i];
            } else if (1 < normDevVector[3][i] && normDevVector[3][i] < 2) {
                ghtSumList[i] = 5;
            } else if (2 < normDevVector[3][i] && normDevVector[3][i] < 5) {
                ghtSumList[i] = 2;
            }
            //LOG GHTSUMLIST
        }

        CommonUtils.writeToTotalDeviationFile("\n GHTSUMLIST \n " + Arrays.toString(ghtSumList));

        switch (resList.length) {
            case 54:
                sup1Sum = ghtSumList[0] + ghtSumList[1] + ghtSumList[14];
                sup2Sum = ghtSumList[5] + ghtSumList[6] + ghtSumList[18] + ghtSumList[19];
                sup3Sum = ghtSumList[2] + ghtSumList[3] + ghtSumList[4] + ghtSumList[7] + ghtSumList[8];
                sup4Sum = ghtSumList[9] + ghtSumList[10] + ghtSumList[11] + ghtSumList[12] + ghtSumList[13] + ghtSumList[22];
                sup5Sum = ghtSumList[23] + ghtSumList[24] + ghtSumList[25] + ghtSumList[26];
                inf1Sum = ghtSumList[27] + ghtSumList[40] + ghtSumList[41];
                inf2Sum = ghtSumList[31] + ghtSumList[32] + ghtSumList[45] + ghtSumList[46];
                inf3Sum = ghtSumList[42] + ghtSumList[43] + ghtSumList[44] + ghtSumList[47] + ghtSumList[48];
                inf4Sum = ghtSumList[35] + ghtSumList[36] + ghtSumList[37] + ghtSumList[38] + ghtSumList[39] + ghtSumList[49];
                inf5Sum = ghtSumList[36] + ghtSumList[37] + ghtSumList[38] + ghtSumList[39];
                break;
            case 76:
                sup1Sum = ghtSumList[0] + ghtSumList[1] + ghtSumList[19];
                sup2Sum = ghtSumList[5] + ghtSumList[6] + ghtSumList[24] + ghtSumList[25];
                sup3Sum = ghtSumList[2] + ghtSumList[3] + ghtSumList[4] + ghtSumList[7] + ghtSumList[8];
                sup4Sum = ghtSumList[10] + ghtSumList[11] + ghtSumList[12] + ghtSumList[14] + ghtSumList[15] + ghtSumList[29];
                sup5Sum = ghtSumList[30] + ghtSumList[31] + ghtSumList[33] + ghtSumList[34];

                inf1Sum = ghtSumList[38] + ghtSumList[57] + ghtSumList[58];
                inf2Sum = ghtSumList[43] + ghtSumList[44] + ghtSumList[62] + ghtSumList[63];
                inf3Sum = ghtSumList[59] + ghtSumList[60] + ghtSumList[61] + ghtSumList[64] + ghtSumList[65];
                inf4Sum = ghtSumList[48] + ghtSumList[67] + ghtSumList[68] + ghtSumList[69] + ghtSumList[71] + ghtSumList[72];
                inf5Sum = ghtSumList[49] + ghtSumList[50] + ghtSumList[52] + ghtSumList[53];
                //LOG THESE
                break;
            default:

                break;
        }

        CommonUtils.writeToTotalDeviationFile("\nsup1Sum" + sup1Sum);
        CommonUtils.writeToTotalDeviationFile("\nsup2Sum" + sup2Sum);
        CommonUtils.writeToTotalDeviationFile("\nsup3Sum" + sup3Sum);
        CommonUtils.writeToTotalDeviationFile("\nsup4Sum" + sup4Sum);
        CommonUtils.writeToTotalDeviationFile("\nsup5Sum" + sup5Sum);
        CommonUtils.writeToTotalDeviationFile("\ninf1Sum" + inf1Sum);
        CommonUtils.writeToTotalDeviationFile("\ninf2Sum" + inf2Sum);
        CommonUtils.writeToTotalDeviationFile("\ninf3Sum" + inf3Sum);
        CommonUtils.writeToTotalDeviationFile("\ninf4Sum" + inf4Sum);
        CommonUtils.writeToTotalDeviationFile("\ninf5Sum" + inf5Sum);

        //Determine GHT Answer
        if (normDevVector[4][1] < -20) {
            normDevVector[6][0] = -2.0;//ONL
        } else if (defectDepthVal > gh995) {
            normDevVector[6][0] = 5.0;//AHS
        } else if (sup1Sum - inf1Sum > diff_9995[0] || sup2Sum - inf2Sum > diff_9995[1] || sup3Sum - inf3Sum > diff_9995[2] || sup4Sum - inf4Sum > diff_9995[3] || sup5Sum - inf5Sum > diff_9995[4] ||
                sup1Sum - inf1Sum < diff_05[0] || sup2Sum - inf2Sum < diff_05[1] || sup3Sum - inf3Sum < diff_05[2] || sup4Sum - inf4Sum < diff_05[3] || sup5Sum - inf5Sum < diff_05[4]) {
            normDevVector[6][0] = -1.0;//ONL
        } else if ((sup1Sum > ght_SumCutOffs[0] && inf1Sum > ght_SumCutOffs[5]) || (sup2Sum > ght_SumCutOffs[1] && inf2Sum > ght_SumCutOffs[6]) || (sup3Sum > ght_SumCutOffs[2] && inf3Sum > ght_SumCutOffs[7]) ||
                (sup4Sum > ght_SumCutOffs[3] && inf4Sum > ght_SumCutOffs[8]) || (sup5Sum > ght_SumCutOffs[4] && inf5Sum > ght_SumCutOffs[9])) {
            normDevVector[6][0] = 0;//ONL
        } else if (sup1Sum - inf1Sum > diff_985[0] || sup2Sum - inf2Sum > diff_985[1] || sup3Sum - inf3Sum > diff_985[2] || sup4Sum - inf4Sum > diff_985[3] || sup5Sum - inf5Sum > diff_985[4] ||
                sup1Sum - inf1Sum < diff_15[0] || sup2Sum - inf2Sum < diff_15[1] || sup3Sum - inf3Sum < diff_15[2] || sup4Sum - inf4Sum < diff_15[3] || sup5Sum - inf5Sum < diff_15[4]) {
            if (defectDepthVal < gh005) {
                normDevVector[6][0] = 4.0;//BL GRS
            } else {
                normDevVector[6][0] = 2.0;//BL
            }
        } else {
            if (defectDepthVal < gh005) {
                normDevVector[6][0] = 3.0;//GRS
            } else {
                normDevVector[6][0] = 1.0;//WNL
            }
        }



        // VFI code
        if (pattern_stratNumber == 31 || pattern_stratNumber == 33) {
            normDevVector[6][1] = 0;
        } else {

            double temporary_vfi = 0;
            int[] positions_30_2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72};
            double[] normalized_weights = {0.06970339, 0.027118644, 0.016737288, 0.012076271, 0.009533898, 0.027118644, 0.016737288, 0.012076271, 0.009533898, 0.016737288, 0.012076271, 0.012076271, 0.012076271, 0.009533898, 0.06970339, 0.027118644, 0, 0.012076271, 0.027118644, 0.016737288, 0.012076271, 0.009533898, 0.016737288, 0.012076271, 0.012076271, 0.012076271, 0.009533898, 0.06970339, 0.027118644, 0, 0.012076271, 0.027118644, 0.016737288, 0.012076271, 0.009533898, 0.016737288, 0.012076271, 0.012076271, 0.012076271, 0.009533898, 0.06970339, 0.027118644, 0.016737288, 0.012076271, 0.009533898, 0.027118644, 0.016737288, 0.012076271, 0.009533898, 0.016737288, 0.012076271, 0.012076271, 0.012076271, 0.009533898};


            double[] vfi_normalized_weights = new double[51];

            double[] vfi_normalList = new double[51];
            double[] temp_vfi_normalList = new double[54];

            double[] vfi_PD5 = new double[51];
            double[] temp_vfi_PD5 = new double[54];

            double[] vfi_TD5 = new double[51];
            double[] temp_vfi_TD5 = new double[54];

            double[] vfi_resList = new double[51];
            double[] temp_vfi_resList = new double[54];

            double[] vfi_slopeList = new double[51];
            double[] temp_vfi_slopeList = new double[54];

            double[] vfi_stdevList = new double[51];
            double[] temp_vfi_stdevList = new double[54];

            CommonUtils.writeToTotalDeviationFile("\n normalized_weights length \n " + normalized_weights.length);

            for (int i = 0, k = 0; i < 54; i++) {
                if (i == 16 || i == 29 || i == 33)
                    continue;
                vfi_normalized_weights[k++] = normalized_weights[i];
            }


            if (resList.length == 76) {
                for (int i = 0; i < positions_30_2.length; i++) {
                    temp_vfi_resList[i] = resList[positions_30_2[i]];
                }
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_resList[k++] = temp_vfi_resList[i];
                }
            } else {
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_resList[k++] = resList[i];
                }
            }

            CommonUtils.writeToTotalDeviationFile("\n vfi_resList \n " + Arrays.toString(vfi_resList));

            if (normalList.length == 76) {
                for (int i = 0; i < positions_30_2.length; i++) {
                    temp_vfi_normalList[i] = normalList[positions_30_2[i]];
                }
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_normalList[k++] = temp_vfi_normalList[i];
                }
            } else {
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_normalList[k++] = normalList[i];
                }
            }

            CommonUtils.writeToTotalDeviationFile("\n vfi_normalList \n " + Arrays.toString(vfi_normalList));

            if (slopeList.length == 76) {
                for (int i = 0; i < positions_30_2.length; i++) {
                    temp_vfi_slopeList[i] = slopeList[positions_30_2[i]];
                }
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_slopeList[k++] = temp_vfi_slopeList[i];
                }
            } else {
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_slopeList[k++] = slopeList[i];
                }
            }

            CommonUtils.writeToTotalDeviationFile("\n vfi_slopeList \n " + Arrays.toString(vfi_slopeList));

            if (slopeList.length == 76) {
                for (int i = 0; i < positions_30_2.length; i++) {
                    temp_vfi_stdevList[i] = stdevList[positions_30_2[i]];
                }
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_stdevList[k++] = temp_vfi_stdevList[i];
                }
            } else {
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_stdevList[k++] = stdevList[i];
                }
            }

            if (pd5.length == 76) {
                for (int i = 0; i < positions_30_2.length; i++) {
                    temp_vfi_PD5[i] = pd5[positions_30_2[i]];
                }
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_PD5[k++] = temp_vfi_PD5[i];
                }
            } else {
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_PD5[k++] = pd5[i];
                }
            }

            if (md5.length == 76) {
                for (int i = 0; i < positions_30_2.length; i++) {
                    temp_vfi_TD5[i] = md5[positions_30_2[i]];
                }
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_TD5[k++] = temp_vfi_TD5[i];
                }
            } else {
                for (int i = 0, k = 0; i < 54; i++) {
                    if (i == 16 || i == 29 || i == 33)
                        continue;
                    vfi_TD5[k++] = md5[i];
                }
            }

            CommonUtils.writeToTotalDeviationFile("\n vfi_slopeList \n " + Arrays.toString(vfi_slopeList));

            double[] vfi_ageCorrVals = new double[vfi_normalList.length];
            double[] vfi_TD = new double[vfi_resList.length];
            double[] vfi_PD = new double[vfi_resList.length];

            double[] vfi_values = new double[54];
            double[] multiplied_vfi_values = new double[51];


            //Age Corrected Normal vals
            for (int i = 0; i < vfi_normalList.length; i++) {
                vfi_ageCorrVals[i] = vfi_normalList[i] - patAge * abs(vfi_slopeList[i]);
            }

            CommonUtils.writeToTotalDeviationFile("\n vfi_ageCorrVals \n " + Arrays.toString(vfi_ageCorrVals));

            //Total Deviation
            for (int i = 0; i < vfi_TD.length; i++) {
                vfi_TD[i] = vfi_resList[i] - vfi_ageCorrVals[i];
            }

            CommonUtils.writeToTotalDeviationFile("\n vfi_TD \n " + Arrays.toString(vfi_TD));

        /*double[] vfi_defectDepthFinder = new double[vfi_TD.length - removeElements.length];
        //create list for sorting
        int k = -1;
        CommonUtils.writeToLogFile("normDevVector[0].length " + vfi_TD.length);
        CommonUtils.writeToLogFile("removeElements.length " + removeElements.length);
        for (int i = 0; i < vfi_TD.length; i++) {
            //check if index must be ignored.
            boolean processI = true;
            for (int removeElement : removeElements) {
                if (removeElement - i == 0) {
                    processI = false;
                    break;
                }
            }
            if (processI) {
                k = k + 1;
                vfi_defectDepthFinder[k] = vfi_TD[i];
            }
        }*/

            double[] vfi_defectDepthFinder = vfi_TD.clone();
            CommonUtils.writeToTotalDeviationFile("\ndefectDepthVal before sort \n" + Arrays.toString(vfi_defectDepthFinder));
            // remove elements related to the blindspot
            Arrays.sort(vfi_defectDepthFinder);

            CommonUtils.writeToTotalDeviationFile("\ndefectDepthVal after sort \n" + Arrays.toString(vfi_defectDepthFinder));
            double vfi_defectDepthVal = 0;
       /* if (pattern_stratNumber == 31 || pattern_stratNumber == 33) {
            vfi_defectDepthVal = vfi_defectDepthFinder[42] + 0.95 * (vfi_defectDepthFinder[43] - vfi_defectDepthFinder[42]);
        } else {*/
            vfi_defectDepthVal = vfi_defectDepthFinder[42] + (0.5 * (vfi_defectDepthFinder[43] - vfi_defectDepthFinder[42]));
            // }

            CommonUtils.writeToTotalDeviationFile("\nvfi_defectDepthVal \n" + vfi_defectDepthVal);

            //calculate pattern deviation
            for (int i = 0; i < vfi_TD.length; i++) {
                vfi_PD[i] = vfi_TD[i] - vfi_defectDepthVal;
            }

            CommonUtils.writeToTotalDeviationFile("\nvfi_PD \n" + Arrays.toString(vfi_PD));
            CommonUtils.writeToTotalDeviationFile("\nvfi_ageCorrVals length \n" + vfi_ageCorrVals.length);
            CommonUtils.writeToTotalDeviationFile("\nvfi_normalList length \n" + vfi_normalList.length);
            CommonUtils.writeToTotalDeviationFile("\nvfi_stdevList length \n" + vfi_stdevList.length);
            CommonUtils.writeToTotalDeviationFile("\nvfi_resList length \n" + vfi_resList.length);
            CommonUtils.writeToTotalDeviationFile("\nvfi_TD length \n" + vfi_TD.length);
            double vfi_md = 0;
            double vfi_sumTermMDNum = 0;
            double vfi_sumTermMDDen = 0;
            double vfi_sumMSValue = 0;
            for (int i = 0; i < vfi_TD.length; i++) {
                //  vfi_sumTermMDNum = ((vfi_ageCorrVals[i] - vfi_normalList[i]) / ((vfi_stdevList[i]) * (vfi_stdevList[i]))) + vfi_sumTermMDNum;
                vfi_sumTermMDNum = ((vfi_resList[i] - vfi_ageCorrVals[i]) / ((vfi_stdevList[i]) * (vfi_stdevList[i]))) + vfi_sumTermMDNum;

                vfi_sumTermMDDen = (1 / ((vfi_stdevList[i]) * (vfi_stdevList[i]))) + vfi_sumTermMDDen;
                vfi_sumMSValue = vfi_resList[i] + vfi_sumMSValue;

            }
            CommonUtils.writeToTotalDeviationFile("\nvfi_sumTermMDNum \n" + vfi_sumTermMDNum);
            CommonUtils.writeToTotalDeviationFile("\nvfi_sumTermMDDen \n" + vfi_sumTermMDDen);

            CommonUtils.writeToTotalDeviationFile("\nvfi_sumTermMDDen \n" + vfi_sumTermMDDen);
            double oneBy51 = 0.019607843;
            vfi_md = (oneBy51 * vfi_sumTermMDNum) / (oneBy51 * vfi_sumTermMDDen);

            CommonUtils.writeToTotalDeviationFile("\nvfi_md " + vfi_md);
            // normDevVector[0][i] = ageCorrVals[i] - normalList[i];
            //new double[resList.length
            Log.e("callNormativeData", " positions_30_2 " + positions_30_2.length);
            Log.e("callNormativeData", " normalized_weights " + normalized_weights.length);
            Log.e("callNormativeData", " normDevVector[0] " + normDevVector[0].length);
            Log.e("callNormativeData", " normDevVector[2]" + normDevVector[2].length);
            CommonUtils.writeToTotalDeviationFile("\nvfi_PD " + Arrays.toString(vfi_PD));
            CommonUtils.writeToTotalDeviationFile("\nvfi_TD " + Arrays.toString(vfi_TD));
            CommonUtils.writeToTotalDeviationFile("\nvfi_PD5 " + Arrays.toString(vfi_PD5));
            CommonUtils.writeToTotalDeviationFile("\nvfi_TD5 " + Arrays.toString(vfi_TD5));
            if (vfi_md > -20) {
                for (int i = 0; i < vfi_ageCorrVals.length; i++) {
                    if (vfi_PD[i] > vfi_PD5[i]) { //PD check
                        vfi_values[i] = 100;
                    } else if (vfi_resList[i] == 0) {
                        vfi_values[i] = 0;
                    } else {
                        vfi_values[i] = 100 - abs(vfi_TD[i] / vfi_ageCorrVals[i]) * 100;
                    }
                }
            } else {
                for (int i = 0; i < vfi_ageCorrVals.length; i++) {
                    if (vfi_TD[i] > vfi_TD5[i]) {
                        vfi_values[i] = 100;
                    } else if (vfi_resList[i] == 0) {
                        vfi_values[i] = 0;
                    } else {
                        vfi_values[i] = 100 - abs(vfi_TD[i] / vfi_ageCorrVals[i]) * 100;
                    }
                }
            }

           /* for (int i = 0; i < vfi_ageCorrVals.length; i++) {
                if (vfi_md > -20) {  //MD values check
                    if (vfi_PD[i] > vfi_PD5[i]) { //PD check
                        vfi_values[i] = 100;
                    } else if (vfi_resList[i] == 0) {
                        vfi_values[i] = 0;
                    } else {
                        vfi_values[i] = 100 - abs(vfi_TD[i] / vfi_ageCorrVals[i]) * 100;
                    }
                } else {
                    if (vfi_TD5[i] > 5) {
                        vfi_values[i] = 100;
                    } else if (vfi_resList[i] == 0) {
                        vfi_values[i] = 0;
                    } else {
                        vfi_values[i] = 100 - abs(vfi_TD[i] / vfi_ageCorrVals[i]) * 100;
                    }
                }
            }*/

            CommonUtils.writeToTotalDeviationFile("\nvfi_values " + Arrays.toString(vfi_values));

            for (int i = 0; i < 51; i++) {
                multiplied_vfi_values[i] = vfi_values[i] * vfi_normalized_weights[i];
            }
            CommonUtils.writeToTotalDeviationFile("\nmultiplied_vfi_values " + Arrays.toString(multiplied_vfi_values));
            for (double a : multiplied_vfi_values) {
                temporary_vfi = a + temporary_vfi;
            }
            Log.e("callNormativeData", "temporary_vfi " + temporary_vfi);
            normDevVector[6][1] = temporary_vfi;
        }
        CommonUtils.writeToTotalDeviationFile("\nnormDevVector\n" + Arrays.deepToString(normDevVector));
        return normDevVector;
    }

}
